---
    - hosts: [localhost]
      become: yes
      
      tasks:
        - name: Get list of locally installed binaries
          command: ls /usr/bin
          register: installed_binaries
                   
        - name: Install eksctl
          block:
            - name: Download eksctl
              get_url:
                url: "https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_Linux_amd64.tar.gz"
                dest: "{{ download_dir }}/eksctl_download.tgz"
            - name: Extract eksctl
              unarchive:
                src: "{{ download_dir }}/eksctl_download.tgz"
                dest: "{{ download_dir }}"
                remote_src: yes
            - name: Move eksctl to /usr/bin
              command: mv {{ download_dir }}/eksctl /usr/bin
            - name: Give users permission to execute eksctl
              file:
                path: /usr/bin/eksctl
                mode: +x
          when: "installed_binaries.stdout.find('eksctl') == -1"
        
        - name: Install aws-iam-authenticator
          block:
            - name: Download aws-iam-authenticator
              get_url:
                url: "https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/usr/bin/linux/amd64/aws-iam-authenticator"
                dest: "{{ download_dir }}/aws-iam-authenticator"
            - name: Move aws-iam-authenticator to /usr/bin
              command: mv {{ download_dir }}/aws-iam-authenticator /usr/local/usr/bin
            - name: Give users permission to execute
              file:
                path: /usr/bin/aws-iam-authenticator
                mode: +x
          when: "installed_binaries.stdout.find('aws-iam-authenticator') == -1"
        
        - name: kubectl
          block:
            - name: Download kubectl
              get_url:
                url: "https://storage.googleapis.com/kubernetes-release/release/v1.16.2/usr/bin/linux/amd64/kubectl"
                dest: "{{ download_dir }}"
            - name: Move kubectl to /usr/bin
              command: mv {{ download_dir }}/kubectl /usr/bin
            - name: Give users permission to execute
              file:
                path: /usr/bin/kubectl
                mode: +x
          when: "installed_binaries.stdout.find('kubectl') == -1"
        
        # ensure that only one cluster exists at a time
        - name: Get existing cluster
          command: eksctl get clusters
          register: existing_clusters
          become: no
        - debug: msg=" {{ existing_clusters.stdout }}"
        - name: Setup K8s-cluster with eksctl
          block:
            - name: Setup clusters on desired number of nodes
              command: >
                eksctl create cluster
                --name {{eks_clustername}}
                --version {{eks_clusterversion}}
                --region {{eks_region}}
                --nodegroup-name worker-node
                --node-type {{eks_worker_instancetype}}
                --nodes {{eks_worker_desiredcount}}
                --nodes-min {{eks_worker_mincount}}
                --nodes-max {{eks_worker_maxcount}}
                --node-ami {{eks_worker_ami}}
              become: no
            - name: Update kubeconfig
              command: aws eks --region {{eks_region}} update-kubeconfig --name {{eks_clustername}}
          when: "existing_clusters.stdout.find('No clusters found') != -1"
